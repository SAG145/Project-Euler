import math
from time import perf_counter
start = perf_counter()
def gcd(x,y):
    while x % y != 0:
        a = x
        b = y
        y = a % b
        x = b
    return y

# def minus_x(f):
#     return (-f[0],f[1])
#
# def plus(f,g):
#     a,b = f[0],f[1]
#     c,d = g[0],g[1]
#     return (a*d + b*c,b*d)
#
# def multiple(f,g):
#     return (f[0]*g[0],f[1]*g[1])
#
# def divide(f,g):
#     return (f[0]*g[1],f[1]*g[0])
#
# def minus(f,g):
#     return plus(f,minus_x(g))

def inter(i,j):
    k = lines[i]
    l = lines[j]
    a,b,c = k[0],k[1],k[2]
    d,e,f = l[0],l[1],l[2]
    p1 = c*e - b*f
    q1 = a*e - b*d
    if p1 == 0 or q1 == 0:
        g1 = 1
    else:
        g1 = gcd(p1,q1)
    p2 = c*d - a*f
    q2 = b*d - a*e
    if p2 == 0 or q2 == 0:
        g2 = 1
    else:
        g2 = gcd(p2, q2)
    return ((p1 / g1,q1 / g1),(p2 / g2, q2 / g2))

def value(f):
    return float(str(f[0] / f[1])[:10])

def line(p,q):
    return (p[1] - q[1],q[0] - p[0],q[0]*p[1] - p[0]*q[1])

def larger(n,f):
    return n*f[1] > f[0]

def smaller(n,f):
    return n*f[1] < f[0]

def true_inter(i,j):
    k = lines[i]
    l = lines[j]
    if k[0] == l[0] and k[1] == l[1]:
        return 0
    inter1 = inter(i,j)
    if inter1[0][0] == 0 or inter1[1][0] == 0:
        return 0
    x = inter1[0]
    if smaller(segments[i][0][0],x) and larger(segments[i][1][0],x):
        if smaller(segments[j][0][0],x) and larger(segments[j][1][0],x):
            return inter1
    return 0

index = 0
s = [290797]
t = []
segments = []
current_segment = []
lines = []
for k in range(1,20001):
    s.append(s[-1]**2 % 50515093)
    t.append(s[-1] % 500)
    if k % 2 == 0:
        current_segment.append((t[k - 2],t[k - 1]))
    if k % 4 == 0:
        if current_segment[1] < current_segment[0]:
            segments.append(tuple(current_segment[::-1]))
        else:
            segments.append(tuple(current_segment))
        lines.append(line(current_segment[0],current_segment[1]))
        current_segment = []
print(perf_counter() - start)

segments = list(dict.fromkeys(segments))
lines = list(dict.fromkeys(lines))
print(len(segments),len(lines))
true_intersection_points = []
for s in range(1,5000):
    print(s,"sss",segments[s])
    for t in range(s):
        i = true_inter(s,t)
        if i != 0:
            # if i[0][1] == 1 or i[1][1] == 1:
            #     print("intersection",i,segments[s],segments[t])
            true_intersection_points.append(i)
print(len(true_intersection_points))
true_intersection_points = list(dict.fromkeys(true_intersection_points))
print(len(true_intersection_points))
inter_value = []
for tip in true_intersection_points:
    # print("tip",tip)
    inter_value.append((value(tip[0]),value(tip[1])))
# print(sorted(inter_value[:100000]))
inter_value = list(dict.fromkeys(inter_value))
print(len(inter_value))
print(segments[-1])
# for d in range(5):
#     print(str(segments[d])[1:-1])








#a = 4777626
