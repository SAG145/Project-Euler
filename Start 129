import math
from time import perf_counter
start = perf_counter()
def all_primes_below_n(n):
    primes_bool = [False, False] + [True] * (n - 2)
    for k in range(2, int(math.sqrt(n)) + 1):
        if primes_bool[k]:
            for l in range(2*k,n,k):
                primes_bool[l] = False
    primes_list = []
    for k in range(n):
        if primes_bool[k]:
            primes_list.append(k)
    return primes_list
    
def prime_factors_with_repetitions(n,primes_list):
    if n % 2 == 0:
        primes_list.append(2)
        return prime_factors_with_repetitions(n // 2, primes_list)
    if n == 1:
        return primes_list
    else:
        for k in range(3, int(math.sqrt(n)) + 1, 2):
            if n % k == 0:
                primes_list.append(k)
                return prime_factors_with_repetitions(n // k, primes_list)
    primes_list.append(n)
    return primes_list
    
def R(k):
    return int("1"*k)

def divisors(n):
    divi = []
    for k in range(2,math.floor(math.sqrt(n) + 1)):
        if n % k == 0:
                divi.append(k)
                divi.append(n // k)
    return divi
def gcd(a,b):
    while b != 0:
        r = a % b
        a = b
        b = r
    return a
    
def lcm(a,b):
    return a*b // gcd(a,b)
    
# def lcm(lst):
#     if len(lst) == 2:
#         return lst[0]*lst[1] // gcd(lst[0],lst[1])
#     return lcm(lcm(lst[:2]) + lst[2:])
    
def euler_function(n,primes):
    for p in primes:
        n *= (1 - 1 / p)
    return round(n)
    
def A(n):
    pf = prime_factors_with_repetitions(n,[])
    pf = list(dict.fromkeys(pf))
    if len(pf) != 1:
        a = lcm(A_list[pf[0]],A_list[n // pf[0]])
        return a
    mini = euler_function(n,pf)
    options = divisors(mini)
    for d in options:
        if d < mini:
            if R(d) % n == 0:
                mini = d
    return mini
    
A_list = [0]*2*10**6
n = 3
while True:
    if n % 5 != 0:
        print(n)
        a = A(n)
        A_list[n] = a
        if a > 10**6:
            print(n)
            break
    n += 2






print(perf_counter() - start)
