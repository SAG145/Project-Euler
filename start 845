import math
from time import perf_counter
start = perf_counter()
def all_primes_below_n(n):
    primes_bool = [False, False] + [True] * (n - 2)
    for k in range(2, int(math.sqrt(n)) + 1):
        if primes_bool[k]:
            for l in range(2*k,n,k):
                primes_bool[l] = False
    primes_list = []
    for k in range(n):
        if primes_bool[k]:
            primes_list.append(k)
    return primes_list

def partition(n,partitions):
    new = []
    if n < 10:
        new.append((n,))
    for k in range(max(1,n - 9),n):
        for p in partitions[k]:
            if len(p) < 18:
                new.append(tuple(sorted(p + (n - k,))))
    partitions.append(list(dict.fromkeys(new)))

partitions = [[(0,)],[(1,)],[(1,1),(2,)]]
for n in range(3,163):
    partition(n,partitions)
    print(n,len(partitions[-1]))

factorial = []
for k in range(20):
    factorial.append(math.factorial(k))

def permutation(part,zero):
    lst = [zero] + [0]*9
    for i in part:
        lst[i] += 1
    m = factorial[sum(lst)]
    for k in lst:
        m = m // factorial[k]
    return m

print(perf_counter() - start)
