import math
def A(a,b,c):
    x = (2*b**2 + 2*a*b + 2*b*c - 2*a*c) / (2*(b + c))
    return (x,math.sqrt((a + b)**2 - x**2))

def intersection_line_circle(circle,line):
    a,b,r = circle[0],circle[1],circle[2]
    m,n = line[0],line[1]
    x = quadratic_equation(1 + m**2,2*m*n - 2*a - 2*b*m,a**2 + n**2 + b**2 - r**2 - 2*b*n)
    solutions = []
    for s in x:
        y = m*s + n
        solutions.append((s,y))
    return solutions

def intersection(circle1,circle2):
    a,b,r = circle1[0],circle1[1],circle1[2]
    c,d,s = circle2[0],circle2[1],circle2[2]
    y = (d*r + b*s) / (r + s)
    x = (a*s + r*c) / (r + s)
    p = (x,y)
    return p

def intersections(circle1,circle2):
    a,b,r = circle1[0],circle1[1],circle1[2]
    c,d,s = circle2[0],circle2[1],circle2[2]
    u = (r**2 - s**2 + d**2 + c**2 - b**2 - a**2) / (2*(c - a))
    v = (b - d) / (c - a)
    return intersection_line_circle(circle1,(1 / v,-u / v))

def quadratic_equation(a,b,c):
    discri = b**2 - 4*a*c
    if discri < 0:
        return
    elif discri == 0:
        return (-b / (2*a),)
    else:
        return ((-b - math.sqrt(discri)) / (2*a),(-b + math.sqrt(discri)) / (2*a))

def line(p,q):
    m = (p[1] - q[1]) / (p[0] - q[0])
    n = p[1] - m*p[0]
    return (m,n)

def perpendicular(l,p):
    m = -1 / l[0]
    n = p[1] - m*p[0]
    return (m,n)

def inter(k,l):
    m,b = k[0],k[1]
    n,c = l[0],l[1]
    x = (c - b) / (m - n)
    return (x,m*x + b)

def solution1(a,b,c,d,e,f):
    print("s1: ",a,b,c,d,e,f)
    y = (c*d - a*f) / (b*d - a*e)
    print(y)
    return ((c - b*y) / a,y)

def solution2(a,b,c,d,e,f,g,h,i,j,k,l):
    print("s2: ",a,b,c,d,e,f,g,h,i,j,k,l)
    # s = solution1(a*f - b*e,a*g - c*e, a*h - d*e,a*j - b*i,a*k - c*i,a*l - d*i)
    # s = solution1((f*a - b*e) / a,(g*a - c*e) / a,h - d*e / a,(j*a - b*i) / a,(k*a - c*i) / a,l - i*d / a)
    s = solution1((f*a - b*e) / a,(g*a - c*e) / a,h - d*e / a,a*j - b*i,a*k - c*i,a*l - d*i)
    y = s[0]
    z = s[1]
    x = (d - b*y - c*z) / a
    print(a*x+b*y+c*z,d)
    print(e*x+f*y+g*z,h)
    print(i*x+j*y+k*z,l)
    return (x,y,z)

def solution3(a,b,c,d,e,f,g,h,i,j,k,l):
    print("s3: ",a,b,c,d,e,f,g,h,i,j,k,l)
    s = solution2(a - e,b - f,c - g,d - h,e - i,f - j,g - k,h - l,a - i,b - j,c - k,d - l)
    x,y,z = s[0],s[1],s[2]
    print(a*x + x**2 + b*y + y**2 + c*z - z**2,d)
    print(e*x + x**2 + f*y + y**2 + g*z - z**2,h)
    print(i*x + x**2 + j*y + y**2 + k*z - z**2,l)
    return s

def D(a,b,c):
    circle1 = (0,0,b)
    circle2 = (b + c,0,c)
    circle3 = A(a,b,c) + (a,)
    h = intersection(circle1,circle2)
    i = intersection(circle1,circle3)
    j = intersection(circle2,circle3)
    l = line(h,i)
    k = line(h,j)
    p = ((h[0] + i[0]) / 2,(h[1] + i[1]) / 2)
    q = ((h[0] + j[0]) / 2,(h[1] + j[1]) / 2)
    return inter(perpendicular(l,p),perpendicular(k,q))

def E(a,b,c):
    circle1 = (0, 0, b)
    circle2 = (b + c, 0, c)
    circle3 = A(a, b, c) + (a,)
    a, b, r = circle1[0], circle1[1], circle1[2]
    c, d, s = circle2[0], circle2[1], circle2[2]
    e, f, t = circle3[0], circle3[1], circle3[2]
    c1 = circle3[:2] + (0.8 + circle3[2],)
    c2 = circle2[:2] + (0.8 + circle2[2],)
    print(c1,c2)
    print(intersection(c1,c2),"ccc")
    return solution3(-2*a,-2*b,-2*r,r**2 - a**2 - b**2,-2*c,-2*d,-2*s,s**2 - c**2 - d**2,-2*e,-2*f,-2*t,t**2 - e**2 - f**2)


# s = solution2(2,3,5,7,11,13,17,19,23,29,31,37)
# x,y,z = s[0],s[1],s[2]
# print(2*x+3*y+5*z)
# print(11*x+13*y+17*z)
# print(23*x+29*y+31*z)

# s = solution3(2,3,5,7,11,13,17,19,23,29,31,37)
# x,y,z = s[0],s[1],s[2]
# print("s3 = ",x,y,z)
# print(2*x + x**2 + 3*y + y**2 + 5*z + z**2)
# print(2*x + x**2 + 3*y + y**2 + 5*z + z**2)
#
# a,b = 2,3
# print(11*x+13*y+17*z)
# print(23*x+29*y+31*z)
# print(D(2,10,17))
# print(intersection((0,0,10),(1,2,9)))
print(D(2,10,17))
